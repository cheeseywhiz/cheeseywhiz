#!/usr/bin/env python3
import re
import subprocess

profile_key_prompt = (lambda: input('Password: '))


def wifi_data():
    networks = []

    def split_keep(self):
        regex = re.compile('BSS ..:')
        matches = regex.findall(self)
        data = regex.split(self)[1:]
        return (
            ''.join(pair)
            for pair in zip(matches, data))

    stdout = subprocess.run(
        'sudo iw dev wlp6s0 scan',
        shell=True, stdout=subprocess.PIPE).stdout
    data = stdout.decode('utf-8')
    data = [
        [chunk.strip()
         for chunk in netw.splitlines()]
        for netw in split_keep(data)]

    for profile_scan in data:
        new_netw = {
            'SSID': '',
            'connected': False,
            'secure': False,
            'signal': 0, }
        for entry in profile_scan:
            if 'SSID' in entry:
                new_netw['SSID'] = re.split(r'SSID: *', entry)[1]
            elif 'associated' in entry:
                new_netw['connected'] = True
            elif 'RSN' in entry:
                new_netw['secure'] = True
            elif 'signal' in entry:
                signal = re.search(r'\d\d', entry).group(0)
                new_netw['signal'] = int(signal)
        networks.append(Profile(new_netw))

    def sort_key(netw):
        return netw['signal']

    networks.sort(key=sort_key)
    return networks


class Profile(dict):
    def __init__(self, inst: dict):
        self.inst = inst
        self.key = ''
        super().__init__(self.inst)
        self.pf_name = f"{self['SSID'].split(' ')[0]}wifi"
        self.pf_path = f'/tmp/{self.pf_name}'

    def generate_profile(self):
        with open(self.pf_path, 'w') as f:
            f.write(str(self))

    def command(self, cmd):
        good_cmds = ['enable', 'disable', 'start', 'stop']
        if cmd not in good_cmds:
            raise ValueError('\n'.join([
                'Command not recognized.',
                'Options:',
                '',
                *good_cmds, ]))
        else:
            return subprocess.run(
                f'sudo netctl {cmd} {self.pf_name}', shell=True)

    def __str__(self):
        essid = self['SSID'].replace(' ', '/ ')
        return '\n'.join(filter(None, [
            "Description='Automatically generated by netctl tool by cheese'",
            'Interface=wlp6s0',
            'Connection=wireless',
            'Security=wpa' if self['secure'] else None,
            f'ESSID={essid}',
            'IP=dhcp',
            f"Key='{self.key}'" if self.key else None, ]))

    def __repr__(self):
        return f'Profile({repr(self.inst)})'

    def key_prompt(self):
        return input('Password: ')

    def key_error_handle(self, message):
        print(message)

    def __enter__(self):
        if not self['secure']:
            return self

        while True:
            key = self.key_prompt()
            if len(key) < 8:
                self.key_error_handle(
                    'Error: password shorter than 8 characters')
            elif len(key) > 63:
                self.key_error_handle(
                    'Error: password longer than 63 characters')
            else:
                self.key = key
                return self

    def __exit__(self, e_type, e_val, e_tb):
        self.key = ''


def main():
    global data
    data = wifi_data()
    print(data)


if __name__ == '__main__':
    main()
