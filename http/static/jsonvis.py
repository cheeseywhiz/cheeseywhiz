""":
Provides html file visualization of a json dataset
"""
import json
import os
import subprocess

ROOT = os.path.abspath('./')
TEMPLATES = os.path.join(ROOT, 'templates')


def _spaces(amount: int):
    return str(''.join([' ' for _ in range(amount)]))


def _iterate(data: iter, nspaces=0, indent_level=1):
    if isinstance(data, dict):
        list_items = []
        for key, value in data.items():
            new_items = [
                _iterate(key, nspaces, indent_level),
                f'{_spaces(nspaces * indent_level)}<ul>\n',
                _iterate(value, nspaces, indent_level + 1),
                f'{_spaces(nspaces * indent_level)}</ul>\n'
            ]
            for item in new_items:
                list_items.append(item)
        return ''.join(list_items)
    elif isinstance(data, list) or isinstance(data, set):
        list_items = [f'{_spaces(nspaces * indent_level)}<ul>\n']
        for item in data:
            list_items.append(_iterate(item, nspaces, indent_level + 1))
        list_items.append(f'{_spaces(nspaces * indent_level)}</ul>\n')
        return ''.join(list_items)
    else:
        return f'{_spaces(nspaces * indent_level)}<li>{data}</li>\n'


def format_dict(data: iter, nspaces: int):
    """
    Format a dict object into HTML unordered list format.
    Returns string
    """
    return f'<ul>\n{_iterate(data, nspaces)}</ul>'


def download(url: str) -> dict:
    """
    Collect json data from a url.
    Returns dict
    """
    data = subprocess.run(
        f"curl '{url}'",  # in quotes for URL parameters
        stdout=subprocess.PIPE,
        shell=True
    ).stdout
    return json.loads(data)


def make_html(data: iter, nspaces: int, template_name=None, debug=0):
    """
    Take an iterable dataset and format the output to an HTML file. If
    debug == 1, then print the HTML ouput without writing to a file.
    """
    html = '\n'.join([
        '<!-- This is auto generated by /static/jsonvis.py, do no edit. -->',
        '{% extends "base.html" %}', '{% block json %}',
        format_dict(data, nspaces), '{% endblock json %}'
    ])
    if not debug:
        html_file = os.path.join(TEMPLATES, template_name)
        with open(html_file, 'w') as file:
            file.write(html)
    else:  # debug mode: print html but don't make file
        print(html)
