""":
Provides html file visualization of a json dataset
"""
import json
import os
import subprocess

_ROOT = os.path.abspath('./')
_TEMPLATES = os.path.join(_ROOT, 'templates')


def _spaces(amount: int):
    return ''.join([' ' for _ in range(amount)])


def _iterate(data: iter, nspaces=0, indent_level=1):
    if isinstance(data, dict):
        list_items = []
        for key, value in data.items():
            new_items = [
                _iterate(key, nspaces, indent_level),
                f'{_spaces(nspaces * indent_level)}<ul>\n',
                _iterate(value, nspaces, indent_level + 1),
                f'{_spaces(nspaces * indent_level)}</ul>\n'
            ]
            for item in new_items:
                list_items.append(item)
        return ''.join(list_items)
    elif isinstance(data, list) or isinstance(data, set):
        list_items = [f'{_spaces(nspaces * indent_level)}<ul>\n']
        for item in data:
            list_items.append(_iterate(item, nspaces, indent_level + 1))
        list_items.append(f'{_spaces(nspaces * indent_level)}</ul>\n')
        return ''.join(list_items)
    else:
        return f'{_spaces(nspaces * indent_level)}<li>{data}</li>\n'


def _format_dict(data: iter, nspaces: int):
    """
    Format a dict object into HTML unordered list format.
    Returns string
    """
    return f'<ul>\n{_iterate(data, nspaces)}</ul>'


class JsonVis:
    def download(self, url: str):
        data = subprocess.run(
            f"curl '{url}'",  # in quotes for URL parameters
            stdout=subprocess.PIPE,
            shell=True
        ).stdout
        self.data = json.loads(data)
        return self

    def make_html(self, template_name: str, nspaces: int, debug=0):
        html = '\n'.join([
            '<!-- This is generated by /static/jsonvis.py, do no edit. -->',
            '{% extends "base.html" %}', '{% block json %}',
            _format_dict(self.data, nspaces), '{% endblock json %}'
        ])
        if not debug:
            html_file = os.path.join(_TEMPLATES, template_name)
            with open(html_file, 'w') as file:
                file.write(html)
        else:  # debug mode: print html but don't make file
            print(html)
        return self
